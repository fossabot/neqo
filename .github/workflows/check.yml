name: CI
on: [push, pull_request]
env:
  CARGO_TERM_COLOR: always

jobs:
  check:
    name: Build & test
    strategy:
      fail-fast: false
      matrix:
        # os: [ubuntu-latest, macos-latest, windows-latest]
        os: [windows-latest]
        rust-toolchain: [1.65.0] #, stable] #, beta]
    runs-on: ${{ matrix.os }}
    env:
      RUSTFLAGS: -C link-arg=-fuse-ld=lld
    defaults:
      run:
        shell: bash

    steps:
      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust-toolchain }}
          components: rustfmt, clippy

      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get install -y --no-install-recommends gyp mercurial ninja-build
          curl -L --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash

      - name: Install dependencies (MacOS)
        if: runner.os == 'MacOS'
        run: |
          brew install ninja mercurial cargo-binstall
          # python3 -m pip install gyp-next
          # Above does not work, since pypi only has gyp 0.15.0, which is too old
          # for the homebrew python3. Install from source instead.
          python3 -m pip install git+https://github.com/nodejs/gyp-next
          python3 -m pip install packaging
          echo "$(python3 -m site --user-base)/bin" >> "$GITHUB_PATH"

      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: Set-ExecutionPolicy Unrestricted -Scope Process; iex (iwr "https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.ps1").Content

      - name: Set up Windows build environment
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Install Rust tools
        run: cargo +${{ matrix.rust-toolchain }} binstall --no-confirm cargo-llvm-cov cargo-nextest

      - name: Checkout
        uses: actions/checkout@v4

      # This step might be removed if the distro included a recent enough
      # version of NSS.  Ubuntu 20.04 only has 3.49, which is far too old.
      # (neqo-crypto/build.rs would also need to query pkg-config to get the
      # right build flags rather than building NSS.)
      - name: Fetch NSS and NSPR
        run: |
          hg clone https://hg.mozilla.org/projects/nspr "$NSPR_DIR"
          git clone --depth=1 https://github.com/nss-dev/nss "$NSS_DIR"
          echo "NSS_DIR=$NSS_DIR" >> "$GITHUB_ENV"
          echo "NSPR_DIR=$NSPR_DIR" >> "$GITHUB_ENV"
          echo "NSS_JOBS=$NUMBER_OF_PROCESSORS" >> "$GITHUB_ENV"
        env:
          NSS_DIR: ${{ github.workspace }}/nss
          NSPR_DIR: ${{ github.workspace }}/nspr

      # Ideally, we could just use the build.sh script that comes with NSS.
      - name: Rewire NSS build.sh (Windows)
        if: runner.os == 'Windows'
        run: |
          echo "#!/usr/bin/env bash" > "$NSS_DIR"/build.sh
          echo "make -C \"$NSS_DIR\" -j \"$NSS_JOBS\" nss_build_all USE_64=1 NSS_DISABLE_GTESTS=1" >> "$NSS_DIR"/build.sh
          echo "BASH=$SHELL" >> "$GITHUB_ENV"

          sed -i.bak 's/smime ssl/smime ssl mozpkix/' "$NSS_DIR"/lib/Makefile
          cp "$NSS_DIR"/lib/libpkix/Makefile "$NSS_DIR"/lib/libpkix/manifest.mn "$NSS_DIR"/lib/mozpkix/
          sed -i.bak 's/pkix pkix_pl_nss//' "$NSS_DIR"/lib/mozpkix/manifest.mn
          echo "LIBRARY_NAME = mozpkix" >> "$NSS_DIR"/lib/mozpkix/manifest.mn
          echo "MODULE = mozpkix" >> "$NSS_DIR"/lib/mozpkix/manifest.mn
          echo "CPPSRC = \\" >> "$NSS_DIR"/lib/mozpkix/manifest.mn
          ls "$NSS_DIR"/lib/mozpkix/lib | sed -E 's|(.*)|lib/\1 \\|' >> "$NSS_DIR"/lib/mozpkix/manifest.mn
          echo '$(NULL)' >> "$NSS_DIR"/lib/mozpkix/manifest.mn

          cp "$NSS_DIR"/lib/libpkix/include/Makefile "$NSS_DIR"/lib/mozpkix/include/
          cp "$NSS_DIR"/lib/libpkix/manifest.mn "$NSS_DIR"/lib/mozpkix/include
          sed -i.bak -e 's/include pkix pkix_pl_nss/pkix/' -e 's|../..|../../..|g' "$NSS_DIR"/lib/mozpkix/include/manifest.mn

          cp "$NSS_DIR"/lib/libpkix/include/Makefile "$NSS_DIR"/lib/mozpkix/include/pkix/

          cat "$NSS_DIR"/lib/libpkix/include/manifest.mn | grep -Ev 'pkix' > "$NSS_DIR"/lib/mozpkix/include/pkix/manifest.mn
          sed -i.bak -e 's|../../..|../../../..|g' "$NSS_DIR"/lib/mozpkix/include/pkix/manifest.mn
          echo "PRIVATE_EXPORTS = \\" >> "$NSS_DIR"/lib/mozpkix/include/pkix/manifest.mn
          ls "$NSS_DIR"/lib/mozpkix/include/pkix | sed 's|$| \\|' >> "$NSS_DIR"/lib/mozpkix/include/pkix/manifest.mn
          echo '$(NULL)' >> "$NSS_DIR"/lib/mozpkix/include/pkix/manifest.mn
          echo "MODULE = mozpkix" >> "$NSS_DIR"/lib/mozpkix/include/pkix/manifest.mn

          cp "$NSS_DIR"/lib/nss/nss.rc "$NSS_DIR"/lib/mozpkix/mozpkix.rc
          sed -i.bak -e 's|"nss"|"mozpkix"|' "$NSS_DIR"/lib/mozpkix/mozpkix.rc

      - name: Install moztools (Windows)
        if: runner.os == 'Windows'
        run: |
          curl -L -o moztools.zip https://ftp.mozilla.org/pub/mozilla/libraries/win32/moztools-static.zip
          unzip moztools.zip
          mv moztools/bin/nsinstall.exe /usr/bin
          rm -r moztools.zip moztools
          # See https://github.com/ilammy/msvc-dev-cmd#name-conflicts-with-shell-bash
          rm /usr/bin/link.exe

      - name: Build
        run: |
          cargo +${{ matrix.rust-toolchain }} build -v --all-targets || true
          find dist
          exit 1
          echo "LD_LIBRARY_PATH=${{ github.workspace }}/dist/Debug/lib" >> "$GITHUB_ENV"
          echo "DYLD_LIBRARY_PATH=${{ github.workspace }}/dist/Debug/lib" >> "$GITHUB_ENV"
        env:
          RUST_BACKTRACE: 1

      - name: Run tests
        run: cargo +${{ matrix.rust-toolchain }} nextest run -v --no-fail-fast
        env:
           RUST_BACKTRACE: 1
           RUST_LOG: neqo=debug

      - name: Check formatting
        run: cargo +${{ matrix.rust-toolchain }} fmt --all -- --check
        # if: success() || failure()

      - name: Clippy
        run: cargo +${{ matrix.rust-toolchain }} clippy -v --tests -- -D warnings
        # if: success() || failure()

      - name: Determine coverage
        run: cargo +${{ matrix.rust-toolchain }} llvm-cov nextest --all-targets --no-fail-fast --lcov --output-path lcov.info
        env:
           RUST_BACKTRACE: 1
           RUST_LOG: neqo=debug

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: lcov.info
          fail_ci_if_error: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
