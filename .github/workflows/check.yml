name: CI
on: [push, pull_request]
env:
  CARGO_TERM_COLOR: always

jobs:
  check:
    name: Build & test
    strategy:
      # fail-fast: false
      matrix:
        os: [windows-latest] # ubuntu-latest, macos-latest] #
        rust-toolchain: [stable] # , 1.65.0, beta]
    runs-on: ${{ matrix.os }}
    defaults:
          run:
            shell: ${{ matrix.os == 'windows-latest' && 'msys2 {0}' || 'bash' }}

    steps:
      # - name: Install Rust
      #   uses: actions-rust-lang/setup-rust-toolchain@v1
      #   with:
      #     toolchain: ${{ matrix.rust-toolchain }}
      #     components: rustfmt, clippy
      #     cache: false # enabling the cache leads to spurious failures

      # - name: Install dependencies (Linux)
      #   if: runner.os == 'Linux'
      #   env:
      #     DEBIAN_FRONTEND: noninteractive
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install -y --no-install-recommends gyp mercurial ninja-build

      # - name: Install dependencies (MacOS)
      #   if: runner.os == 'MacOS'
      #   run: |
      #     brew install ninja mercurial
      #     python3 -m pip install gyp-next
      #     echo "$(python3 -m site --user-base)/bin" >> $GITHUB_PATH


      # - name: Install dependencies (Windows)
      #   if: runner.os == 'Windows'
      #   shell: bash
      #   run: |
      #     choco install --no-progress MozillaBuild
      #     echo "C:/mozilla-build/bin" >> $GITHUB_PATH
      #     echo "C:/mozilla-build/msys2/usr/bin" >> $GITHUB_PATH
      #     echo "MOZILLABUILD=C:/mozilla-build" >> $GITHUB_ENV
      #     echo "MOZBUILD_STATE_PATH=C:/mozbuild-state" >> $GITHUB_ENV
      #     echo "GYP_MSVS_OVERRIDE_PATH=C:\Program Files\Microsoft Visual Studio\2022\Enterprise" >> $GITHUB_ENV
      #     echo "GYP_MSVS_VERSION=2022" >> $GITHUB_ENV
      #     # echo "OS_TARGET=WIN95" >> $GITHUB_ENV

      # - name: Fetch NSS and NSPR
      #   shell: bash
      #   run: |
      #     hg clone https://hg.mozilla.org/projects/nspr "$NSPR_DIR"
      #     git clone --depth=1 https://github.com/nss-dev/nss "$NSS_DIR"
      #     "$NSS_DIR"/build.sh -v --clang
      #   env:
      #     NSS_DIR: ${{ github.workspace }}/nss
      #     NSPR_DIR: ${{ github.workspace }}/nspr

      # - name: Install dependencies (Windows)
      #   if: runner.os == 'Windows'
      #   uses: msys2/setup-msys2@v2
      #   with:
      #     msystem: UCRT64
      #     install: nsinstall ninja python-six # gyp in msys2 is too old, install separately below
      #     path-type: inherit

      - name: Install more dependencies (Windows)
        if: runner.os == 'Windows'
        shell: bash
        run: |
          choco install --no-progress MozillaBuild
          # python3 -m pip install gyp-next
          # echo "OS_TARGET=WIN95" >> $GITHUB_ENV
          echo "GYP_MSVS_OVERRIDE_PATH=C:\Program Files\Microsoft Visual Studio\2022\Enterprise" >> $GITHUB_ENV
          echo "GYP_MSVS_VERSION=2022" >> $GITHUB_ENV
          # echo "C:\Program Files\Microsoft Visual Studio\2022\Enterprise/VC/Tools/MSVC/14.38.33130/bin/Hostx64/x64" >> $GITHUB_PATH
          # echo "C:\Program Files\Microsoft Visual Studio\2022\Enterprise/MSBuild/Current/Bin/" >> $GITHUB_PATH
          # echo "C:\Program Files\Microsoft Visual Studio\2022\Enterprise/VSSDK/VisualStudioIntegration/Tools/Bin/" >> $GITHUB_PATH
          hg clone https://hg.mozilla.org/projects/nspr
          git clone --depth=1 https://github.com/nss-dev/nss

      - name: Build
        if: runner.os == 'Windows'
        # see https://anadoxin.org/blog/bringing-visual-studio-compiler-into-msys2-environment.html/
        shell: bash
        run: |
          # find "C:\Program Files" -name mt.exe || true
          # find "C:\Program Files\Microsoft Visual Studio\2022\Enterprise" -name \*.exe || true
          # export PATH="/c/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Tools/MSVC/14.38.33130/bin/Hostx64/x64:$PATH"
          # echo $PATH
          # cl -v || true
          # mt || true
          # which link.exe || true
          # which cl.exe || true
          # rm /usr/bin/link.exe || true
          # which link.exe || true
          nss/build.sh -v --msvc
          # make -C nss nss_build_all || true
          # ls -l nss || true
          # cat nss/config.log || true
          # ls -l nspr || true
          # ls -l nspr/WIN954.0_DBG.OBJ || true
          # cat nspr/WIN954.0_DBG.OBJ/config.log || true
        env:
          MOZILLABUILD: "C:\\mozilla-build"
          MOZBUILD_STATE_PATH: ${{ github.workspace }}/.mozbuild
          CARGO_PROFILE_DEV_BUILD_OVERRIDE_DEBUG: true

      # - name: Checkout
      #   uses: actions/checkout@v4

      # - name: Build
      #   run: cargo +${{ matrix.rust-toolchain }} build -v --all-targets

      # - name: Run tests
      #   run: cargo +${{ matrix.rust-toolchain }} test -v
      #   env:
      #      RUST_BACKTRACE: 1
      #      RUST_LOG: neqo=debug

      # - name: Check formatting
      #   run: cargo +${{ matrix.rust-toolchain }} fmt --all -- --check
      #   if: ${{ success() || failure() }}

      # - name: Clippy
      #   run: cargo +${{ matrix.rust-toolchain }} clippy -v --tests -- -D warnings
      #   if: ${{ success() || failure() }}
