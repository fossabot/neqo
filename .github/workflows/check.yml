name: CI
on: [push, pull_request]
env:
  CARGO_TERM_COLOR: always

jobs:
  check:
    name: Build & test
    strategy:
      fail-fast: false
      matrix:
        # os: [ubuntu-latest, macos-latest] #, windows-latest]
        os: [windows-latest]
        rust-toolchain: [1.65.0] #, stable] #, beta]
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash

    steps:
      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust-toolchain }}
          components: rustfmt, clippy

      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get install -y --no-install-recommends gyp mercurial ninja-build
          curl -L --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash

      - name: Install dependencies (MacOS)
        if: runner.os == 'MacOS'
        run: |
          brew install --force --overwrite ninja mercurial cargo-binstall || brew link --overwrite python@3.11
          # python3 -m pip install gyp-next
          # Above does not work, since pypi only has gyp 0.15.0, which is too old
          # for the homebrew python3. Install from source instead.
          python3 -m pip install git+https://github.com/nodejs/gyp-next
          python3 -m pip install packaging
          echo "$(python3 -m site --user-base)/bin" >> "$GITHUB_PATH"

      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: Set-ExecutionPolicy Unrestricted -Scope Process; iex (iwr "https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.ps1").Content

      # We only need nsinstall, but without the MSYS2 action, I can't come up with a better way to install it.
      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install --no-progress MozillaBuild ninja
          echo "C:/mozilla-build/bin" >> $GITHUB_PATH
          echo "C:/mozilla-build/msys2/usr/bin" >> $GITHUB_PATH
          echo "MOZILLABUILD=C:/mozilla-build" >> $GITHUB_ENV
          echo "MOZBUILD_STATE_PATH=C:/mozbuild-state" >> $GITHUB_ENV
          echo "GYP_MSVS_OVERRIDE_PATH=C:\Program Files\Microsoft Visual Studio\2022\Enterprise" >> $GITHUB_ENV
          echo "GYP_MSVS_VERSION=2022" >> $GITHUB_ENV
          echo "OS_TARGET=WIN95" >> $GITHUB_ENV
          python3 -m pip install git+https://github.com/nodejs/gyp-next
          python3 -m pip install packaging
          echo "$(python3 -m site --user-base)/bin" >> "$GITHUB_PATH"

      - uses: ilammy/msvc-dev-cmd@v1
        if: runner.os == 'Windows'

      - name: Install Rust tools
        run: |
          cargo +${{ matrix.rust-toolchain }} binstall --no-confirm cargo-llvm-cov cargo-nextest

      - name: Checkout
        uses: actions/checkout@v4

      # This step might be removed if the distro included a recent enough
      # version of NSS.  Ubuntu 20.04 only has 3.49, which is far too old.
      # (neqo-crypto/build.rs would also need to query pkg-config to get the
      # right build flags rather than building NSS.)
      # We're also tweaking the NSS checkout for Windows builds.
      - name: Fetch NSS and NSPR
        run: |
          hg clone https://hg.mozilla.org/projects/nspr "$NSPR_DIR"
          git config --global core.autocrlf false
          git clone --depth=1 https://github.com/nss-dev/nss "$NSS_DIR"
          # sed -i.bak 's/-w44996//' "$NSS_DIR"/lib/sqlite/Makefile
          echo "NSS_DIR=$NSS_DIR" >> "$GITHUB_ENV"
          echo "NSPR_DIR=$NSPR_DIR" >> "$GITHUB_ENV"
        env:
          NSS_DIR: ${{ github.workspace }}/nss
          NSPR_DIR: ${{ github.workspace }}/nspr

      # Just here to have a convenient way to debug the build.
      # Once this works, this step should be removed, since the actual build
      # happens as part of neqo-crypto/build.rs.
      - name: NSS build attempt (Windows)
        if: runner.os == 'Windows'
        shell: bash
        run: |
          rm /usr/bin/link.exe || true
          which link.exe || true
          rm $NSS_DIR/coreconf/msvc.sh
          touch $NSS_DIR/coreconf/msvc.sh
          $NSS_DIR/build.sh -v -Ddisable_tests=1 --static --msvc
        # run: make -C "$NSS_DIR" -j "$NUMBER_OF_PROCESSORS" nss_build_all USE_64=1 NS_USE_GCC=1

      - name: Build
        run: |
          cargo +${{ matrix.rust-toolchain }} build -v --all-targets
          echo "LD_LIBRARY_PATH=${{ github.workspace }}/dist/Debug/lib" >> "$GITHUB_ENV"
          echo "DYLD_LIBRARY_PATH=${{ github.workspace }}/dist/Debug/lib" >> "$GITHUB_ENV"

      - name: Run tests
        run: |
          cargo +${{ matrix.rust-toolchain }} nextest run -v --no-fail-fast
        env:
           RUST_BACKTRACE: 1
           RUST_LOG: neqo=debug

      - name: Check formatting
        run: cargo +${{ matrix.rust-toolchain }} fmt --all -- --check
        # if: success() || failure()

      - name: Clippy
        run: cargo +${{ matrix.rust-toolchain }} clippy -v --tests -- -D warnings
        # if: success() || failure()

      - name: Determine converage
        run: cargo +${{ matrix.rust-toolchain }} llvm-cov nextest --all-targets --no-fail-fast --lcov --output-path lcov.info
        env:
           RUST_BACKTRACE: 1
           RUST_LOG: neqo=debug

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: lcov.info
          fail_ci_if_error: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
